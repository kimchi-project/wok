#
# Project Wok
#
# Copyright IBM Corp, 2015-2017
#
# Code derived from Project Kimchi
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301 USA
#

import os
from ConfigParser import SafeConfigParser


__version__ = "@wokversion@"
__release__ = "@wokrelease@"

CACHEEXPIRES = 31536000     # expires is one year.
DEFAULT_LOG_LEVEL = "info"


def get_log_download_path():
    return os.path.join(paths.state_dir, 'logs')


def get_object_store():
    return os.path.join(paths.state_dir, 'objectstore')


def get_pushserver_socket_dir():
    return '/run/user/%s' % os.geteuid()


def get_version():
    return "-".join([__version__, __release__])


def get_wstokens_dir():
    return os.path.join(paths.state_dir, 'ws-tokens')


class Paths(object):

    def __init__(self):
        self.prefix = self.get_prefix()
        self.installed = (self.prefix == '@pkgdatadir@')
        self.ui_dir = self.add_prefix('ui')
        self.sys_conf_dir = '@sysconfdir@/wok'
        self.sys_nginx_conf_dir = '@sysconfdir@/nginx/conf.d'

        if self.installed:
            self.conf_dir = self.sys_conf_dir
            self.nginx_conf_dir = self.sys_nginx_conf_dir
            self.state_dir = '@localstatedir@/lib/wok'
            self.log_dir = '@localstatedir@/log/wok'
            self.src_dir = '@wokdir@'
            self.plugins_dir = '@wokdir@/plugins'
            self.mo_dir = '@prefix@/share/locale'
            self.logrotate_dir = "@sysconfdir@/logrotate.d/"
        else:
            self.nginx_conf_dir = self.add_prefix('src/nginx')
            self.state_dir = self.add_prefix('data')
            self.log_dir = self.add_prefix('data/logs')
            self.conf_dir = self.add_prefix('src')
            self.src_dir = self.add_prefix('src/wok')
            self.plugins_dir = self.add_prefix('src/wok/plugins')
            self.mo_dir = self.add_prefix('mo')

    def get_prefix(self):
        if __file__.startswith("/"):
            base = os.path.dirname(__file__)
        else:
            base = os.path.dirname('./%s' % __file__)

        if os.access('%s/../../src/wok/config.py' % base, os.F_OK):
            return os.path.abspath('%s/../..' % base)
        else:
            return '@pkgdatadir@'

    def add_prefix(self, subdir):
        return os.path.join(self.prefix, subdir)

    def get_template_path(self, resource):
        return os.path.join(self.ui_dir, 'pages/%s.tmpl' % resource)


paths = Paths()


class PluginPaths(Paths):

    def __init__(self, name):
        super(PluginPaths, self).__init__()

        if self.installed:
            self.plugin_dir = os.path.join('plugins', name)
            self.state_dir = os.path.join('@localstatedir@/lib', name)
            self.conf_dir = '@sysconfdir@/wok/plugins.d'
            self.src_dir = os.path.join('@wokdir@', self.plugin_dir)
            self.mo_dir = '@prefix@/share/locale'
        else:
            self.plugin_dir = os.path.join(paths.plugins_dir, name)
            self.state_dir = self.add_prefix(os.path.join(self.plugin_dir,
                                             'data'))
            self.conf_dir = self.add_prefix(self.plugin_dir)
            self.src_dir = self.add_prefix(self.plugin_dir)
            self.mo_dir = self.add_prefix(os.path.join(self.plugin_dir, 'mo'))

        self.ui_dir = self.add_prefix(os.path.join(self.plugin_dir, 'ui'))
        self.conf_file = os.path.join(self.conf_dir, '%s.conf' % name)


class UIConfig(dict):
    def __init__(self, paths):
        ui_configs = {}
        for sub_dir in ('css', 'js', 'images'):
            ui_configs['/' + sub_dir] = {
                'tools.staticdir.on': True,
                'tools.staticdir.dir': os.path.join(paths.ui_dir, sub_dir),
                'tools.wokauth.on': False,
                'tools.nocache.on': False}
            if sub_dir != 'images':
                ui_configs['/' + sub_dir].update({
                    'tools.expires.on': True,
                    'tools.expires.secs': CACHEEXPIRES})
            else:
                ui_configs['/' + sub_dir].update(
                    {'tools.staticdir.content_types':
                        {'svg': 'image/svg+xml'}})

        self.update(ui_configs)


class WokConfig(dict):
    wok_config = {
        '/': {
            'tools.trailing_slash.on': False,
            'request.methods_with_bodies': ('POST', 'PUT'),
            'tools.nocache.on': True,
            'tools.proxy.on': True,
            'tools.sessions.on': True,
            'tools.sessions.name': 'wok',
            'tools.sessions.secure': True,
            'tools.sessions.httponly': True,
            'tools.sessions.locking': 'explicit',
            'tools.sessions.storage_type': 'ram',
            'tools.wokauth.on': False
        },
        '/data/logs': {
            'tools.staticdir.on': True,
            'tools.staticdir.dir': '%s/logs' % paths.state_dir,
            'tools.staticdir.content_types': {
                    'txt': 'application/x-download'
            },
            'tools.nocache.on': False,
            'tools.wokauth.on': True,
        },
        '/ui/config/tab-ext.xml': {
            'tools.staticfile.on': True,
            'tools.staticfile.filename': os.path.join(paths.ui_dir,
                                                      'config/tab-ext.xml'),
            'tools.nocache.on': True
        },
        '/wok-ui.html': {
            'tools.wokauth.on': True
        },
        '/favicon.ico': {
            'tools.staticfile.on': True,
            'tools.staticfile.filename': '%s/images/logo.ico' % paths.ui_dir
        },
        '/robots.txt': {
            'tools.staticfile.on': True,
            'tools.staticfile.filename': '%s/robots.txt' % paths.ui_dir
        },
        '/help': {
            'tools.staticdir.on': True,
            'tools.nocache.on': True,
            'tools.staticdir.dir': os.path.join(paths.ui_dir,
                                                'pages/help')
        },
        '/libs': {
            'tools.staticdir.on': True,
            'tools.staticdir.dir': os.path.join(paths.ui_dir, 'libs'),
            'tools.wokauth.on': False,
            'tools.nocache.on': False,
            'tools.expires.on': True,
            'tools.expires.secs': CACHEEXPIRES
        }
    }

    def __init__(self):
        super(WokConfig, self).__init__(self)
        self.update(self.wok_config)
        self.update(UIConfig(paths))


class PluginConfig(dict):
    def __init__(self, plugin_name):
        super(PluginConfig, self).__init__(self)
        paths = PluginPaths(plugin_name)
        plugin_config = {
            '/': {
                'tools.trailing_slash.on': False,
                'request.methods_with_bodies': ('POST', 'PUT'),
                'tools.nocache.on': True,
                'tools.proxy.on': True,
                'tools.sessions.on': True,
                'tools.sessions.name': 'wok',
                'tools.sessions.secure': True,
                'tools.sessions.httponly': True,
                'tools.sessions.locking': 'explicit',
                'tools.sessions.storage_type': 'ram'
            },
            '/ui/config/tab-ext.xml': {
                'tools.staticfile.on': True,
                'tools.staticfile.filename':
                os.path.join(paths.ui_dir, 'config/tab-ext.xml'),
                'tools.nocache.on': True}}
        self.update(plugin_config)
        self.update(UIConfig(paths))


def _get_config():
    config = SafeConfigParser()
    config.add_section("server")
    config.set("server", "proxy_port", "8001")
    config.set("server", "cherrypy_port", "8010")
    config.set("server", "websockets_port", "64667")
    config.set("server", "session_timeout", "10")
    config.set("server", "environment", "production")
    config.set('server', 'max_body_size', '4*1024*1024')
    config.set("server", "server_root", "")
    config.set("server", "federation", "off")
    config.set("server", "test", "")
    config.add_section("authentication")
    config.set("authentication", "method", "pam")
    config.set("authentication", "ldap_server", "")
    config.set("authentication", "ldap_search_base", "")
    config.set("authentication", "ldap_search_filter", "")
    config.set("authentication", "ldap_admin_id", "")
    config.add_section("logging")
    config.set("logging", "log_dir", paths.log_dir)
    config.set("logging", "log_level", DEFAULT_LOG_LEVEL)

    config_file = os.path.join(paths.conf_dir, 'wok.conf')
    if os.path.exists(config_file):
        config.read(config_file)
    return config


config = _get_config()


def get_base_plugin_uri(p_name):
    return os.path.join("/", config.get("server", "server_root"),
                        "plugins", p_name)


if __name__ == '__main__':
    print paths.prefix
